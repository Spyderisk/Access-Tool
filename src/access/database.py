from pyodbc import connect, Connection, Cursor, SQL_WVARCHAR, ProgrammingError, Error
import re
import traceback
from typing import Optional, Any, Tuple

from settings import Settings

HEADER = """-- ### Generated by Spyderisk/Access-Tool ###
-- All table names and column names have been escaped ([]) to aid compatibility.
-- Please keep this in mind when writing queries
"""

FOOTER = """"""


def connect_to_database(db: str) -> Tuple[Connection, Cursor]:
    con = connect(
        r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=' + db + ';', readonly=False)
    con.add_output_converter(SQL_WVARCHAR, decode_sketchy_utf16)
    # Needed as MS access throws some junk data at us

    return (con, con.cursor())

# ===  DUMPING  ===


def warn_table_name(name: str):
    print(f"WARNING: Table '{name}' has an invalid name")


def warn_field_name(name: str, field: str):
    print(f"WARNING: Table '{name}' field '{field}' has an invalid name")


def check(text: str, extra: Optional[str] = None):
    # Validate a piece of text does not have invalid characters#
    if re.search("[-. ]", text):
        if extra is not None:
            warn_field_name(text, extra)
        else:
            warn_table_name(text)


def gen_create_table(c: Cursor, table_name: str) -> Optional[str]:
    # Generate CREATE TABLE query for table
    columns = []

    for col in c.columns(table=table_name):
        check(col.column_name, )

        columns.append(f"[{col.column_name}] {col.type_name}")
        # Dashes are not allowed in sqlite tables names,
        # but can be escaped by surrounding the name in square brackets

    if len(columns) == 0:  # Do not create empty tables
        return None
    else:
        check(table_name)

        return f"CREATE TABLE [{table_name}]({", ".join(columns)});\n"


def quote_strings(data: Any) -> Any:
    # Strings may contain spaces, so we must quote them, access only likes single quotes
    if type(data) is str:
        return f"'{data}'"
    else:
        return data


def escape_quotes(data: Any) -> Any:
    # Escape single quotes in scrings
    if type(data) is str:
        return data.replace("'", "''")
    else:
        return data


def fix_boolean(data: Any) -> Any:
    # Convert booleans to uppercase
    if type(data) is bool:
        return str(data).upper()
    else:
        return data


def fix_null(data: Any) -> Any:
    # Convert Nones to NULL
    if data is None:
        return "NULL"
    else:
        return data


def fix_data(data: list[Any]) -> list[Any]:
    # Fix the data so that sql recieves sql types, not python types
    return list(
        map(fix_boolean,
            map(fix_null,
                map(quote_strings,
                    map(escape_quotes,
                        data)
                    )
                )
            )
    )


def gen_table_data(c: Cursor, table_name: str):
    # Generate INSERT queries for table
    q = f"SELECT * FROM {table_name}"

    t = ""
    try:
        rows = c.execute(q)

        for row in rows:
            row = fix_data(list(row))

            t += f"INSERT INTO [{table_name}] VALUES ({", ".join(str(x)
                                                                 for x in row)});\n"
    except ProgrammingError as e:
        print(f"Warning: {str(e)}")
    except Error as e:
        traceback.print_exc()
        print(f"Failed query:\n{q}")

    return t


def decode_sketchy_utf16(raw_bytes):
    s = raw_bytes.decode("utf-16le", "ignore")
    try:
        n = s.index('\x00')
        s = s[:n]
    except ValueError:
        pass
    return s


def dump_database(s: Settings, db: str):
    # Dump all tables from a database
    (_con, c) = connect_to_database(db)

    print(f"Dumping database to {s.databasedump}")

    file = open(s.databasedump, "w")
    file.write(HEADER)

    # Gen Tables, we need ot filter out system tables (MSys*)
    tables = list(
        filter(lambda x: x.table_name[0] != '_', c.tables(tableType='TABLE')))

    total = len(tables)

    i = 0
    file.write("-- ### TABLES ###\n")
    for table in tables:
        sql = gen_create_table(c, table.table_name)
        if sql is not None:
            file.write(sql)
        print(f"Dumping table structure {i+1}/{total}  ", end='\r')
        i += 1

    print("")
    # Gen data
    i = 0
    file.write("-- ### DATA ###\n")
    for table in tables:
        file.write(f"-- ### {table.table_name} data ###\n")
        sql = gen_table_data(c, table.table_name)
        if sql is not None:
            file.write(sql)
        print(f"Dumping table data {i+1}/{total}  ", end='\r')
        i += 1

    file.write(FOOTER)

# ===  LOADING  ===


def load_database(s: Settings, db: str):
    print(f"Loading database {db}")
    (_con, c) = connect_to_database(db)

    file = open(s.databasedump, "r")

    for line in file:
        if not line.lstrip()[0] == '-':  # Strip comments, as access won't
            try:
                c.execute(line)
            except:
                traceback.print_exc()
                print(f"Failed query:\n{line}")

    c.commit()
